"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4851],{15680:(e,t,n)=>{n.d(t,{Z:()=>l});var r,a,s=n(67294);function o(){return o=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o.apply(this,arguments)}const l=e=>{let{title:t,titleId:n,...l}=e;return s.createElement("svg",o({width:12,height:12,viewBox:"0 0 12 12",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":n},l),t?s.createElement("title",{id:n},t):null,r||(r=s.createElement("path",{d:"M9 1a1 1 0 0 0-1-1H1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h3.5V4.5a1 1 0 0 1 1-1H9V1Z",fill:"#F8FAF6"})),a||(a=s.createElement("path",{d:"M11.5 5h-5a.5.5 0 0 0-.5.5v6a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 .5-.5v-6a.5.5 0 0 0-.5-.5Z",fill:"#F8FAF6"})))}},70630:(e,t,n)=>{n.d(t,{p:()=>s});var r=n(67294);const a="base_L3V1",s=e=>{let{method:t,name:n}=e;return r.createElement("h2",{className:a},t&&r.createElement("span",null,t)," ",n&&r.createElement("span",null,n))}},77583:(e,t,n)=>{n.d(t,{D:()=>b});var r=n(67294),a=n(87892);const s="wrapper_d4Gc",o="base_cZP3",l="heading_kxJX",i="select_XVTu",c="buttonWrapper_Ucky",u="button_Pj6S",p="copyButtonSuccess_ASuz",h="copyButtonText_cmI7",d="copyButtonSuccessIcon_tD3P";var m;function v(){return v=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},v.apply(this,arguments)}const g=e=>{let{title:t,titleId:n,...a}=e;return r.createElement("svg",v({width:12,height:12,viewBox:"0 0 12 12",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":n},a),t?r.createElement("title",{id:n},t):null,m||(m=r.createElement("path",{d:"m3.275 4.461-1.788 1.54 1.788 1.538a.596.596 0 0 1 .21.407.619.619 0 0 1-.132.441.585.585 0 0 1-.396.214.563.563 0 0 1-.425-.14l-2.323-2A.598.598 0 0 1 0 6.001a.617.617 0 0 1 .209-.462l2.323-2a.568.568 0 0 1 .814.08.613.613 0 0 1-.071.842ZM11.79 5.54l-2.323-2a.575.575 0 0 0-.425-.14.567.567 0 0 0-.396.214.607.607 0 0 0-.132.44.615.615 0 0 0 .21.408l1.788 1.54-1.788 1.538a.596.596 0 0 0-.21.407.619.619 0 0 0 .132.441.585.585 0 0 0 .396.214.563.563 0 0 0 .425-.14l2.323-2a.6.6 0 0 0 .209-.46.617.617 0 0 0-.209-.462ZM7.747 1.036a.563.563 0 0 0-.627.159.604.604 0 0 0-.117.2l-3.097 8.8a.618.618 0 0 0 .02.459.588.588 0 0 0 .526.346c.119 0 .235-.038.333-.108a.598.598 0 0 0 .212-.287l3.097-8.8a.618.618 0 0 0-.153-.648.578.578 0 0 0-.194-.12Z",fill:"#F8FAF6"})))};var f=n(15680),k=n(69612);const b=e=>{let{codes:t,defaultLanguage:n="go"}=e;const[m,v]=(0,r.useState)(!1),[b,S]=(0,r.useState)(!0),[y,w]=(0,r.useState)(n),R=(0,r.useMemo)((()=>t?.find((e=>e.language===y))),[t,y]),N=(0,r.useMemo)((()=>t?.map((e=>{let{language:t}=e;return t}))),[t]),A=(0,r.useMemo)((()=>R?.codeShorten&&b?R?.codeShorten:R?.code),[R,b]);return r.createElement("div",{className:s},r.createElement("div",{className:l},r.createElement("select",{className:i,onChange:e=>{var t;(t=e.currentTarget.value,["typescript","javascript","python","go","rust"].includes(t))&&w(e.currentTarget.value)}},N.map((e=>r.createElement("option",{value:e,key:e},e)))),r.createElement("div",{className:c},R?.codeShorten&&r.createElement("button",{className:u,onClick:()=>S(!b)},r.createElement("span",null,b?"Show Full Code":"Show Less Code"),r.createElement(g,null)),r.createElement("button",{onClick:()=>{navigator.clipboard.writeText(A).then((()=>{v(!0),setTimeout((()=>{v(!1)}),1e3)})).catch()},className:m?p:u},r.createElement(k.Z,{className:d}),r.createElement("span",{className:h},r.createElement("span",null,"Copy"),r.createElement(f.Z,null))))),R?r.createElement("div",{className:o},r.createElement(a.dn,{text:A,language:R.language,theme:a.cL,codeBlock:!0})):null)}},54968:(e,t,n)=>{n.d(t,{s:()=>l});var r=n(67294);const a="info_eCVA",s="warning_Cn6H",o="base_cmOb",l=e=>{let{text:t,info:n,warning:l,infoInFront:i,warningInFront:c}=e;return r.createElement("div",{className:o},c&&r.createElement("span",{className:s},c),i&&r.createElement("span",{className:a},i),r.createElement("span",null,t),l&&r.createElement("span",{className:s},l),n&&r.createElement("span",{className:a},n)," ")}},36348:(e,t,n)=>{n.d(t,{I:()=>s});var r=n(67294);const a="base_PRYo",s=e=>{let{children:t}=e;return r.createElement("p",{className:a},r.createElement("span",null,t))}},51060:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>f,frontMatter:()=>u,metadata:()=>h,toc:()=>m});var r=n(87462),a=(n(67294),n(3905)),s=n(36348),o=n(70630),l=n(54968);const i=[{code:'package main\n\nimport (\n   "context"\n   "crypto/tls"\n   "crypto/x509"\n   "fmt"\n   v1 "github.com/blockjoy/api/sdk/go/blockjoy/v1" \n   "google.golang.org/grpc"\n   "google.golang.org/grpc/credentials"\n   "log"\n   "time"\n)\n\nconst (\n   authServiceAddress = "unknown-grpc:443" \n)\n\nfunc main() {\n   ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)\n   defer cancel()\n\n   // Set up a connection to the server.\n   authServiceConn, err := grpc.DialContext(ctx, authServiceAddress, getSecureOptions()...) \n   if err != nil {                                                                          \n      log.Fatalf("did not connect: %v", err) \n   } \n   defer authServiceConn.Close() \n   authService := v1.NewAuthServiceClient(authServiceConn) \n   r1, _ := authService.Refresh(ctx, &v1.AuthServiceRefreshRequest{})\n   fmt.Println(r1)\n}\n\nfunc getSecureOptions() []grpc.DialOption {\n   systemRoots, err := x509.SystemCertPool()\n   if err != nil {\n      log.Fatal(err)\n   }\n   cred := credentials.NewTLS(&tls.Config{\n      RootCAs: systemRoots,\n   })\n   return []grpc.DialOption{grpc.WithTransportCredentials(cred), grpc.WithBlock()}\n}',codeShorten:"resp, _ := authService.Refresh(ctx, &v1.AuthServiceRefreshRequest{})\nfmt.Println(resp)",language:"go"},{code:'import React, { useEffect, useState } from \'react\'\nimport { grpc } from "@improbable-eng/grpc-web"\nimport { AuthServiceClient } from "api/sdk/ts/blockjoy/v1/auth_pb_service"\nimport { AuthServiceRefreshRequest, AuthServiceRefreshResponse } from "api/sdk/ts/blockjoy/v1/auth_pb"\n\nvar authService0 = new AuthServiceClient(\'https://unknown-grpc-web\')\nfunction App(){\n    const [response, setResponse] = useState<string>("")\n    useEffect(() => { \n        const authservicerefreshrequest = new AuthServiceRefreshRequest()\n        \n        authService0.refresh(authservicerefreshrequest, getMetadata(), (err, value:AuthServiceRefreshResponse|null) => {\n            setResponse(JSON.stringify(err ? err : value))\n        })\n    }, [])\n    return <>\n        <ol>\n        {response}\n        </ol>\n    </>\n}\nconst getMetadata = () => {\n    const meta = new grpc.Metadata()\n    return meta\n}\nexport default App;',codeShorten:'const authservicerefreshrequest = new AuthServiceRefreshRequest();\n\nservice.refresh(authservicerefreshrequest, (err, value:AuthServiceRefreshResponse|null) => {\n    const resp = JSON.stringify(err ? err : value);\n    console.log("received ", resp);\n})',language:"typescript"},{code:'import React, { useEffect, useState } from \'react\'\nimport { grpc } from "@improbable-eng/grpc-web"\nimport { AuthServiceClient } from "api/sdk/ts/blockjoy/v1/auth_pb_service"\nimport { AuthServiceRefreshRequest, AuthServiceRefreshResponse } from "api/sdk/ts/blockjoy/v1/auth_pb"\n\nvar authService0 = new AuthServiceClient(\'https://unknown-grpc-web\')\nfunction App(){\n    const [response, setResponse] = useState("")\n    useEffect(() => { \n        const authservicerefreshrequest = new AuthServiceRefreshRequest()\n        \n        authService0.refresh(authservicerefreshrequest, getMetadata(), (err, value) => {\n            setResponse(JSON.stringify(err ? err : value))\n        })\n    }, [])\n    return <>\n        <ol>\n        {response}\n        </ol>\n    </>\n}\nconst getMetadata = () => {\n    const meta = new grpc.Metadata()\n    return meta\n}\nexport default App;',codeShorten:'const authservicerefreshrequest = new AuthServiceRefreshRequest();\n\nservice.refresh(authservicerefreshrequest, (err, value) => {\n    const resp = JSON.stringify(err ? err : value);\n    console.log("received ", resp);\n})\n',language:"javascript"},{code:'extern crate api;\nuse tonic::transport::Channel;\n\nuse api::blockjoy::v1::AuthServiceRefreshRequest;\nuse api::blockjoy::v1::auth_service_client::AuthServiceClient;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n  let channel = Channel::from_static("unknown-grpc")\n    .connect()\n    .await?;\n  let mut client = AuthServiceClient::new(channel); \n\n  let request = tonic::Request::new(\n    AuthServiceRefreshRequest{\n      refresh: None,\n      token: None\n    });\n// sending request and waiting for response\n  let response = client.refresh(request).await?.into_inner();\n  println!("RESPONSE={:?}", response);\n  Ok(())\n}\n',language:"rust"}];var c=n(77583);const u={sidebar_position:3},p="Refresh",h={unversionedId:"auth-service/refresh",id:"auth-service/refresh",title:"Refresh",description:"Refresh API token.",source:"@site/docs/auth-service/refresh.mdx",sourceDirName:"auth-service",slug:"/auth-service/refresh",permalink:"/docs/auth-service/refresh",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/auth-service/refresh.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"apiSidebar",previous:{title:"Login",permalink:"/docs/auth-service/login"},next:{title:"Reset Password",permalink:"/docs/auth-service/reset-password"}},d={},m=[],v={toc:m},g="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(g,(0,r.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"refresh"},"Refresh"),(0,a.kt)(o.p,{method:"rpc",name:"Refresh",mdxType:"ApiMethod"}),(0,a.kt)("p",null,"Refresh API token."),(0,a.kt)(o.p,{method:"requests",name:"AuthServiceRefreshRequest",mdxType:"ApiMethod"}),(0,a.kt)(s.I,{mdxType:"VersionType"},"blockjoy.v1.AuthServiceRefreshRequest"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Field"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)(l.s,{text:"refresh",warning:"optional",mdxType:"TableCellWithOption"})),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"This is the refresh token that was sent to you on login. It is optional here, because if it is not provided, the value from the metadata is used as a fallback. This means that if you are a browser client, you do not have to provide this field, as it was set by the call to AuthService/Login, or by the previous call to this endpoint.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"token"),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"This is your old token. It is allowed that this token is expired.")))),(0,a.kt)(c.D,{codes:i,mdxType:"CustomCodeBlock"}),(0,a.kt)(o.p,{method:"returns",name:"AuthServiceRefreshResponse",mdxType:"ApiMethod"}),(0,a.kt)(s.I,{mdxType:"VersionType"},"blockjoy.v1.AuthServiceRefreshResponse"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Field"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"rerfesh"),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"The new refresh token. Just as with the call to AuthService/Login, this value is duplicated in the metadata, so a cookie can be set for the browser client.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"token"),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"A newly minted Json Web Token.")))))}f.isMDXComponent=!0}}]);