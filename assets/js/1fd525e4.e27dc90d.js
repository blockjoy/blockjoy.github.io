"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1885],{15680:(e,t,n)=>{n.d(t,{Z:()=>i});var a,r,o=n(67294);function l(){return l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l.apply(this,arguments)}const i=e=>{let{title:t,titleId:n,...i}=e;return o.createElement("svg",l({width:12,height:12,viewBox:"0 0 12 12",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":n},i),t?o.createElement("title",{id:n},t):null,a||(a=o.createElement("path",{d:"M9 1a1 1 0 0 0-1-1H1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h3.5V4.5a1 1 0 0 1 1-1H9V1Z",fill:"#F8FAF6"})),r||(r=o.createElement("path",{d:"M11.5 5h-5a.5.5 0 0 0-.5.5v6a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 .5-.5v-6a.5.5 0 0 0-.5-.5Z",fill:"#F8FAF6"})))}},31531:(e,t,n)=>{n.d(t,{p:()=>o});var a=n(67294);const r="base_L3V1",o=e=>{let{method:t,name:n}=e;return a.createElement("h2",{className:r},t&&a.createElement("span",null,t)," ",n&&a.createElement("span",null,n))}},98238:(e,t,n)=>{n.d(t,{D:()=>h});var a=n(67294),r=n(87892);const o="wrapper_d4Gc",l="base_cZP3",i="heading_kxJX",s="select_XVTu",c="buttonWrapper_Ucky",p="button_Pj6S",u="copyButtonSuccess_ASuz",d="copyButtonText_cmI7",m="copyButtonSuccessIcon_tD3P";var b;function v(){return v=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},v.apply(this,arguments)}const g=e=>{let{title:t,titleId:n,...r}=e;return a.createElement("svg",v({width:12,height:12,viewBox:"0 0 12 12",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":n},r),t?a.createElement("title",{id:n},t):null,b||(b=a.createElement("path",{d:"m3.275 4.461-1.788 1.54 1.788 1.538a.596.596 0 0 1 .21.407.619.619 0 0 1-.132.441.585.585 0 0 1-.396.214.563.563 0 0 1-.425-.14l-2.323-2A.598.598 0 0 1 0 6.001a.617.617 0 0 1 .209-.462l2.323-2a.568.568 0 0 1 .814.08.613.613 0 0 1-.071.842ZM11.79 5.54l-2.323-2a.575.575 0 0 0-.425-.14.567.567 0 0 0-.396.214.607.607 0 0 0-.132.44.615.615 0 0 0 .21.408l1.788 1.54-1.788 1.538a.596.596 0 0 0-.21.407.619.619 0 0 0 .132.441.585.585 0 0 0 .396.214.563.563 0 0 0 .425-.14l2.323-2a.6.6 0 0 0 .209-.46.617.617 0 0 0-.209-.462ZM7.747 1.036a.563.563 0 0 0-.627.159.604.604 0 0 0-.117.2l-3.097 8.8a.618.618 0 0 0 .02.459.588.588 0 0 0 .526.346c.119 0 .235-.038.333-.108a.598.598 0 0 0 .212-.287l3.097-8.8a.618.618 0 0 0-.153-.648.578.578 0 0 0-.194-.12Z",fill:"#F8FAF6"})))};var f=n(15680),y=n(69612);const h=e=>{let{codes:t,defaultLanguage:n="go"}=e;const[b,v]=(0,a.useState)(!1),[h,k]=(0,a.useState)(!0),[S,w]=(0,a.useState)(n),N=(0,a.useMemo)((()=>t?.find((e=>e.language===S))),[t,S]),E=(0,a.useMemo)((()=>t?.map((e=>{let{language:t}=e;return t}))),[t]),x=(0,a.useMemo)((()=>N?.codeShorten&&h?N?.codeShorten:N?.code),[N,h]);return a.createElement("div",{className:o},a.createElement("div",{className:i},a.createElement("select",{className:s,onChange:e=>{var t;(t=e.currentTarget.value,["typescript","javascript","python","go","rust"].includes(t))&&w(e.currentTarget.value)}},E.map((e=>a.createElement("option",{value:e,key:e},e)))),a.createElement("div",{className:c},N?.codeShorten&&a.createElement("button",{className:p,onClick:()=>k(!h)},a.createElement("span",null,h?"Show Full Code":"Show Less Code"),a.createElement(g,null)),a.createElement("button",{onClick:()=>{navigator.clipboard.writeText(x).then((()=>{v(!0),setTimeout((()=>{v(!1)}),1e3)})).catch()},className:b?u:p},a.createElement(y.Z,{className:m}),a.createElement("span",{className:d},a.createElement("span",null,"Copy"),a.createElement(f.Z,null))))),N?a.createElement("div",{className:l},a.createElement(r.dn,{text:x,language:N.language,theme:r.cL,codeBlock:!0})):null)}},27988:(e,t,n)=>{n.d(t,{i:()=>r});var a=n(67294);const r=e=>{let{children:t}=e;return a.createElement("table",null,t)}},21455:(e,t,n)=>{n.d(t,{R:()=>r});var a=n(67294);const r=e=>{let{children:t}=e;return a.createElement("tbody",null,t)}},32275:(e,t,n)=>{n.d(t,{s:()=>p});var a,r=n(67294);function o(){return o=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o.apply(this,arguments)}const l=e=>{let{title:t,titleId:n,...l}=e;return r.createElement("svg",o({width:12,height:12,viewBox:"0 0 12 12",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":n},l),t?r.createElement("title",{id:n},t):null,a||(a=r.createElement("path",{d:"m9.72 5.28-5-5a1 1 0 0 0-1.415 1.415l4.293 4.293-4.293 4.293a1 1 0 1 0 1.414 1.414l5-5a1 1 0 0 0 0-1.414Z",fill:"#5F615D"})))},i="cell_xH13",s="cell--active_xKr9",c="cellClickable_VRgO",p=e=>{let{items:t,children:n,rowCounter:a=0}=e;const[o,p]=(0,r.useState)(!1),u=e=>n&&0===e,d=e=>0===e&&n?{paddingLeft:12+20*a+"px"}:0===e?{paddingLeft:36+20*a+"px"}:void 0;return r.createElement(r.Fragment,null,r.createElement("tr",null,t?.map(((e,t)=>r.createElement("td",{className:u(t)?c:void 0,onClick:u(t)?()=>p(!o):void 0,style:d(t),key:t},u(t)?r.createElement("span",{className:o?s:i},r.createElement(l,null),e):e)))),r.createElement(r.Fragment,null,o&&n))}},97022:(e,t,n)=>{n.d(t,{s:()=>r});var a=n(67294);const r=e=>{let{items:t}=e;return a.createElement("thead",null,a.createElement("tr",null,t.map(((e,t)=>a.createElement("th",{key:t},e)))))}},42868:(e,t,n)=>{n.d(t,{s:()=>i});var a=n(67294);const r="info_eCVA",o="warning_Cn6H",l="base_cmOb",i=e=>{let{text:t,info:n,warning:i,infoInFront:s,warningInFront:c}=e;return a.createElement("div",{className:l},c&&a.createElement("span",{className:o},c),s&&a.createElement("span",{className:r},s),a.createElement("span",null,t),i&&a.createElement("span",{className:o},i),n&&a.createElement("span",{className:r},n)," ")}},34695:(e,t,n)=>{n.d(t,{I:()=>o});var a=n(67294);const r="base_PRYo",o=e=>{let{children:t}=e;return a.createElement("p",{className:r},a.createElement("span",null,t))}},6018:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>y,contentTitle:()=>g,default:()=>w,frontMatter:()=>v,metadata:()=>f,toc:()=>h});var a=n(87462),r=n(67294),o=n(3905),l=n(34695),i=n(31531),s=n(42868),c=n(27988),p=n(97022),u=n(21455),d=n(32275);const m=[{code:'package main\n\nimport (\n   "context"\n   "crypto/tls"\n   "crypto/x509"\n   "fmt"\n   v1 "github.com/blockjoy/api/sdk/go/blockjoy/v1" \n   "google.golang.org/grpc"\n   "google.golang.org/grpc/credentials"\n   "log"\n   "time"\n)\n\nconst (\n   babelServiceAddress = "unknown-grpc:443" \n)\n\nfunc main() {\n   ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)\n   defer cancel()\n\n   // Set up a connection to the server.\n   babelServiceConn, err := grpc.DialContext(ctx, babelServiceAddress, getSecureOptions()...) \n   if err != nil {                                                                            \n      log.Fatalf("did not connect: %v", err) \n   } \n   defer babelServiceConn.Close() \n   babelService := v1.NewBabelServiceClient(babelServiceConn) \n   r1, _ := babelService.Notify(ctx, &v1.BabelServiceNotifyRequest{})\n   fmt.Println(r1)\n}\n\nfunc getSecureOptions() []grpc.DialOption {\n   systemRoots, err := x509.SystemCertPool()\n   if err != nil {\n      log.Fatal(err)\n   }\n   cred := credentials.NewTLS(&tls.Config{\n      RootCAs: systemRoots,\n   })\n   return []grpc.DialOption{grpc.WithTransportCredentials(cred), grpc.WithBlock()}\n}',codeShorten:"resp, _ := babelService.Notify(ctx, &v1.BabelServiceNotifyRequest{})\nfmt.Println(resp)",language:"go"},{code:'import React, { useEffect, useState } from \'react\'\nimport { grpc } from "@improbable-eng/grpc-web"\nimport { BabelServiceClient } from "api/sdk/ts/blockjoy/v1/babel_pb_service"\nimport { BabelServiceNotifyRequest, BabelServiceNotifyResponse } from "api/sdk/ts/blockjoy/v1/babel_pb"\n\nvar babelService0 = new BabelServiceClient(\'https://unknown-grpc-web\')\nfunction App(){\n    const [response, setResponse] = useState<string>("")\n    useEffect(() => { \n        const babelservicenotifyrequest = new BabelServiceNotifyRequest()\n        \n        babelService0.notify(babelservicenotifyrequest, getMetadata(), (err, value:BabelServiceNotifyResponse|null) => {\n            setResponse(JSON.stringify(err ? err : value))\n        })\n    }, [])\n    return <>\n        <ol>\n        {response}\n        </ol>\n    </>\n}\nconst getMetadata = () => {\n    const meta = new grpc.Metadata()\n    return meta\n}\nexport default App;',codeShorten:'const babelservicenotifyrequest = new BabelServiceNotifyRequest();\n\nservice.notify(babelservicenotifyrequest, (err, value:BabelServiceNotifyResponse|null) => {\n    const resp = JSON.stringify(err ? err : value);\n    console.log("received ", resp);\n})',language:"typescript"},{code:'import React, { useEffect, useState } from \'react\'\nimport { grpc } from "@improbable-eng/grpc-web"\nimport { BabelServiceClient } from "api/sdk/ts/blockjoy/v1/babel_pb_service"\nimport { BabelServiceNotifyRequest, BabelServiceNotifyResponse } from "api/sdk/ts/blockjoy/v1/babel_pb"\n\nvar babelService0 = new BabelServiceClient(\'https://unknown-grpc-web\')\nfunction App(){\n    const [response, setResponse] = useState("")\n    useEffect(() => { \n        const babelservicenotifyrequest = new BabelServiceNotifyRequest()\n        \n        babelService0.notify(babelservicenotifyrequest, getMetadata(), (err, value) => {\n            setResponse(JSON.stringify(err ? err : value))\n        })\n    }, [])\n    return <>\n        <ol>\n        {response}\n        </ol>\n    </>\n}\nconst getMetadata = () => {\n    const meta = new grpc.Metadata()\n    return meta\n}\nexport default App;',codeShorten:'const babelservicenotifyrequest = new BabelServiceNotifyRequest();\n\nservice.notify(babelservicenotifyrequest, (err, value) => {\n    const resp = JSON.stringify(err ? err : value);\n    console.log("received ", resp);\n})\n',language:"javascript"},{code:'extern crate api;\nuse tonic::transport::Channel;\n\nuse api::blockjoy::v1::BabelServiceNotifyRequest;\nuse api::blockjoy::v1::babel_service_client::BabelServiceClient;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n  let channel = Channel::from_static("unknown-grpc")\n    .connect()\n    .await?;\n  let mut client = BabelServiceClient::new(channel); \n\n  let request = tonic::Request::new(\n    BabelServiceNotifyRequest{\n      config: None,\n      uuid: None\n    });\n// sending request and waiting for response\n  let response = client.notify(request).await?.into_inner();\n  println!("RESPONSE={:?}", response);\n  Ok(())\n}',language:"rust"}];var b=n(98238);const v={sidebar_position:4},g="Notify",f={unversionedId:"babel-service/notify",id:"babel-service/notify",title:"Notify",description:"Notify about a new version of node image",source:"@site/docs/babel-service/notify.mdx",sourceDirName:"babel-service",slug:"/babel-service/notify",permalink:"/docs/babel-service/notify",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/babel-service/notify.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"apiSidebar",previous:{title:"Babel Service",permalink:"/docs/babel-service/"},next:{title:"Blockchain Service",permalink:"/docs/blockchain-service/"}},y={},h=[],k={toc:h},S="wrapper";function w(e){let{components:t,...n}=e;return(0,o.kt)(S,(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"notify"},"Notify"),(0,o.kt)(i.p,{method:"rpc",name:"Notify",mdxType:"ApiMethod"}),(0,o.kt)("p",null,"Notify about a new version of node image"),(0,o.kt)(i.p,{method:"requests",name:"BabelServiceNotifyRequest",mdxType:"ApiMethod"}),(0,o.kt)(l.I,{mdxType:"VersionType"},"blockjoy.v1.BabelServiceNotifyRequest"),(0,o.kt)("p",null,"Message to send when a new version of node image is released"),(0,o.kt)(c.i,{mdxType:"Table"},(0,o.kt)(p.s,{items:["Field","Type","Description"],mdxType:"TableHead"}),(0,o.kt)(u.R,{mdxType:"TableBody"},(0,o.kt)(d.s,{items:["config","BabelConfig",(0,o.kt)(r.Fragment,null,(0,o.kt)("p",null,(0,o.kt)("strong",null,"Field:")," Configuration of the node"),(0,o.kt)("p",null,(0,o.kt)("strong",null,"BabelConfig:")," Message to send when a new configuration in cookbook is created"))],mdxType:"TableBodyRow"},(0,o.kt)(d.s,{items:["node_type","string","snake_cased name of the node type"],rowCounter:1,mdxType:"TableBodyRow"}),(0,o.kt)(d.s,{items:["node_version","string","semantic version string of the node type version"],rowCounter:1,mdxType:"TableBodyRow"}),(0,o.kt)(d.s,{items:["protocol","string","snake_cased name of the blockchain"],rowCounter:1,mdxType:"TableBodyRow"})),(0,o.kt)(d.s,{items:["uiid","string","UUID of the version request"],mdxType:"TableBodyRow"}))),(0,o.kt)(b.D,{codes:m,mdxType:"CustomCodeBlock"}),(0,o.kt)(i.p,{method:"returns",name:"BabelServiceNotifyResponse",mdxType:"ApiMethod"}),(0,o.kt)(l.I,{mdxType:"VersionType"},"blockjoy.v1.BabelServiceNotifyResponse"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Field"),(0,o.kt)("th",{parentName:"tr",align:null},"Type"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"node_ids"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)(s.s,{text:"string",info:"repeated",mdxType:"TableCellWithOption"})),(0,o.kt)("td",{parentName:"tr",align:null})))))}w.isMDXComponent=!0}}]);