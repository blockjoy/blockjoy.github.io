"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[481],{15680:(e,t,n)=>{n.d(t,{Z:()=>c});var r,s,a=n(67294);function o(){return o=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o.apply(this,arguments)}const c=e=>{let{title:t,titleId:n,...c}=e;return a.createElement("svg",o({width:12,height:12,viewBox:"0 0 12 12",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":n},c),t?a.createElement("title",{id:n},t):null,r||(r=a.createElement("path",{d:"M9 1a1 1 0 0 0-1-1H1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h3.5V4.5a1 1 0 0 1 1-1H9V1Z",fill:"#F8FAF6"})),s||(s=a.createElement("path",{d:"M11.5 5h-5a.5.5 0 0 0-.5.5v6a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 .5-.5v-6a.5.5 0 0 0-.5-.5Z",fill:"#F8FAF6"})))}},70630:(e,t,n)=>{n.d(t,{p:()=>a});var r=n(67294);const s="base_L3V1",a=e=>{let{method:t,name:n}=e;return r.createElement("h2",{className:s},t&&r.createElement("span",null,t)," ",n&&r.createElement("span",null,n))}},77583:(e,t,n)=>{n.d(t,{D:()=>f});var r=n(67294),s=n(87892);const a="wrapper_d4Gc",o="base_cZP3",c="heading_kxJX",l="select_XVTu",i="buttonWrapper_Ucky",u="button_Pj6S",p="copyButtonSuccess_ASuz",d="copyButtonText_cmI7",h="copyButtonSuccessIcon_tD3P";var m;function v(){return v=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},v.apply(this,arguments)}const g=e=>{let{title:t,titleId:n,...s}=e;return r.createElement("svg",v({width:12,height:12,viewBox:"0 0 12 12",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":n},s),t?r.createElement("title",{id:n},t):null,m||(m=r.createElement("path",{d:"m3.275 4.461-1.788 1.54 1.788 1.538a.596.596 0 0 1 .21.407.619.619 0 0 1-.132.441.585.585 0 0 1-.396.214.563.563 0 0 1-.425-.14l-2.323-2A.598.598 0 0 1 0 6.001a.617.617 0 0 1 .209-.462l2.323-2a.568.568 0 0 1 .814.08.613.613 0 0 1-.071.842ZM11.79 5.54l-2.323-2a.575.575 0 0 0-.425-.14.567.567 0 0 0-.396.214.607.607 0 0 0-.132.44.615.615 0 0 0 .21.408l1.788 1.54-1.788 1.538a.596.596 0 0 0-.21.407.619.619 0 0 0 .132.441.585.585 0 0 0 .396.214.563.563 0 0 0 .425-.14l2.323-2a.6.6 0 0 0 .209-.46.617.617 0 0 0-.209-.462ZM7.747 1.036a.563.563 0 0 0-.627.159.604.604 0 0 0-.117.2l-3.097 8.8a.618.618 0 0 0 .02.459.588.588 0 0 0 .526.346c.119 0 .235-.038.333-.108a.598.598 0 0 0 .212-.287l3.097-8.8a.618.618 0 0 0-.153-.648.578.578 0 0 0-.194-.12Z",fill:"#F8FAF6"})))};var w=n(15680),S=n(69612);const f=e=>{let{codes:t,defaultLanguage:n="go"}=e;const[m,v]=(0,r.useState)(!1),[f,k]=(0,r.useState)(!0),[b,y]=(0,r.useState)(n),R=(0,r.useMemo)((()=>t?.find((e=>e.language===b))),[t,b]),A=(0,r.useMemo)((()=>t?.map((e=>{let{language:t}=e;return t}))),[t]),P=(0,r.useMemo)((()=>R?.codeShorten&&f?R?.codeShorten:R?.code),[R,f]);return r.createElement("div",{className:a},r.createElement("div",{className:c},r.createElement("select",{className:l,onChange:e=>{var t;(t=e.currentTarget.value,["typescript","javascript","python","go","rust"].includes(t))&&y(e.currentTarget.value)}},A.map((e=>r.createElement("option",{value:e,key:e},e)))),r.createElement("div",{className:i},R?.codeShorten&&r.createElement("button",{className:u,onClick:()=>k(!f)},r.createElement("span",null,f?"Show Full Code":"Show Less Code"),r.createElement(g,null)),r.createElement("button",{onClick:()=>{navigator.clipboard.writeText(P).then((()=>{v(!0),setTimeout((()=>{v(!1)}),1e3)})).catch()},className:m?p:u},r.createElement(S.Z,{className:h}),r.createElement("span",{className:d},r.createElement("span",null,"Copy"),r.createElement(w.Z,null))))),R?r.createElement("div",{className:o},r.createElement(s.dn,{text:P,language:R.language,theme:s.cL,codeBlock:!0})):null)}},36348:(e,t,n)=>{n.d(t,{I:()=>a});var r=n(67294);const s="base_PRYo",a=e=>{let{children:t}=e;return r.createElement("p",{className:s},r.createElement("span",null,t))}},12719:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>u,default:()=>g,frontMatter:()=>i,metadata:()=>p,toc:()=>h});var r=n(87462),s=(n(67294),n(3905)),a=n(36348),o=n(70630);const c=[{code:'package main\n\nimport (\n   "context"\n   "crypto/tls"\n   "crypto/x509"\n   "fmt"\n   v1 "github.com/blockjoy/api/sdk/go/blockjoy/v1" \n   "google.golang.org/grpc"\n   "google.golang.org/grpc/credentials"\n   "log"\n   "time"\n)\n\nconst (\n   authServiceAddress = "unknown-grpc:443" \n)\n\nfunc main() {\n   ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)\n   defer cancel()\n\n   // Set up a connection to the server.\n   authServiceConn, err := grpc.DialContext(ctx, authServiceAddress, getSecureOptions()...) \n   if err != nil {                                                                          \n      log.Fatalf("did not connect: %v", err) \n   } \n   defer authServiceConn.Close() \n   authService := v1.NewAuthServiceClient(authServiceConn) \n   r1, _ := authService.ResetPassword(ctx, &v1.AuthServiceResetPasswordRequest{})\n   fmt.Println(r1)\n}\n\nfunc getSecureOptions() []grpc.DialOption {\n   systemRoots, err := x509.SystemCertPool()\n   if err != nil {\n      log.Fatal(err)\n   }\n   cred := credentials.NewTLS(&tls.Config{\n      RootCAs: systemRoots,\n   })\n   return []grpc.DialOption{grpc.WithTransportCredentials(cred), grpc.WithBlock()}\n}',codeShorten:"resp, _ := authService.ResetPassword(ctx, &v1.AuthServiceResetPasswordRequest{})\nfmt.Println(resp)",language:"go"},{code:'import React, { useEffect, useState } from \'react\'\nimport { grpc } from "@improbable-eng/grpc-web"\nimport { AuthServiceClient } from "api/sdk/ts/blockjoy/v1/auth_pb_service"\nimport { AuthServiceResetPasswordRequest, AuthServiceResetPasswordResponse } from "api/sdk/ts/blockjoy/v1/auth_pb"\n\nvar authService0 = new AuthServiceClient(\'https://unknown-grpc-web\')\nfunction App(){\n    const [response, setResponse] = useState<string>("")\n    useEffect(() => { \n        const authserviceresetpasswordrequest = new AuthServiceResetPasswordRequest()\n        \n        authService0.resetPassword(authserviceresetpasswordrequest, getMetadata(), (err, value:AuthServiceResetPasswordResponse|null) => {\n            setResponse(JSON.stringify(err ? err : value))\n        })\n    }, [])\n    return <>\n        <ol>\n        {response}\n        </ol>\n    </>\n}\nconst getMetadata = () => {\n    const meta = new grpc.Metadata()\n    return meta\n}\nexport default App;',codeShorten:'const authserviceresetpasswordrequest = new AuthServiceResetPasswordRequest();\n\nservice.resetPassword(authserviceresetpasswordrequest, (err, value:AuthServiceResetPasswordResponse|null) => {\n    const resp = JSON.stringify(err ? err : value);\n    console.log("received ", resp);\n})\n',language:"typescript"},{code:'import React, { useEffect, useState } from \'react\'\nimport { grpc } from "@improbable-eng/grpc-web"\nimport { AuthServiceClient } from "api/sdk/ts/blockjoy/v1/auth_pb_service"\nimport { AuthServiceResetPasswordResponse, AuthServiceResetPasswordRequest } from "api/sdk/ts/blockjoy/v1/auth_pb"\n\nvar authService0 = new AuthServiceClient(\'https://unknown-grpc-web\')\nfunction App(){\n    const [response, setResponse] = useState("")\n    useEffect(() => { \n        const authserviceresetpasswordrequest = new AuthServiceResetPasswordRequest()\n        \n        authService0.resetPassword(authserviceresetpasswordrequest, getMetadata(), (err, value) => {\n            setResponse(JSON.stringify(err ? err : value))\n        })\n    }, [])\n    return <>\n        <ol>\n        {response}\n        </ol>\n    </>\n}\nconst getMetadata = () => {\n    const meta = new grpc.Metadata()\n    return meta\n}\nexport default App;',codeShorten:'const authserviceresetpasswordrequest = new AuthServiceResetPasswordRequest();\n\nservice.resetPassword(authserviceresetpasswordrequest, (err, value) => {\n    const resp = JSON.stringify(err ? err : value);\n    console.log("received ", resp);\n})',language:"javascript"},{code:'extern crate api;\nuse tonic::transport::Channel;\n\nuse api::blockjoy::v1::AuthServiceUpdatePasswordRequest;\nuse api::blockjoy::v1::auth_service_client::AuthServiceClient;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n  let channel = Channel::from_static("unknown-grpc")\n    .connect()\n    .await?;\n  let mut client = AuthServiceClient::new(channel); \n\n  let request = tonic::Request::new(\n    AuthServiceUpdatePasswordRequest{\n      password: None\n    });\n// sending request and waiting for response\n  let response = client.update_password(request).await?.into_inner();\n  println!("RESPONSE={:?}", response);\n  Ok(())\n}',language:"rust"}];var l=n(77583);const i={sidebar_position:5},u="Update Password",p={unversionedId:"auth-service/update-password",id:"auth-service/update-password",title:"Update Password",description:"Update the user\u2019s password to a new value",source:"@site/docs/auth-service/update-password.mdx",sourceDirName:"auth-service",slug:"/auth-service/update-password",permalink:"/docs/auth-service/update-password",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/auth-service/update-password.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"apiSidebar",previous:{title:"Reset Password",permalink:"/docs/auth-service/reset-password"},next:{title:"Update UIPassword",permalink:"/docs/auth-service/update-uipassword"}},d={},h=[],m={toc:h},v="wrapper";function g(e){let{components:t,...n}=e;return(0,s.kt)(v,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"update-password"},"Update Password"),(0,s.kt)(o.p,{method:"rpc",name:"Update",mdxType:"ApiMethod"}),(0,s.kt)("p",null,"Update the user\u2019s password to a new value"),(0,s.kt)(o.p,{method:"requests",name:"AuthServiceUpdatePasswordRequest",mdxType:"ApiMethod"}),(0,s.kt)(a.I,{mdxType:"VersionType"},"blockjoy.v1.AuthServiceUpdatePasswordRequest"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Field"),(0,s.kt)("th",{parentName:"tr",align:null},"Type"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"password"),(0,s.kt)("td",{parentName:"tr",align:null},"string"),(0,s.kt)("td",{parentName:"tr",align:null})))),(0,s.kt)(l.D,{codes:c,mdxType:"CustomCodeBlock"}),(0,s.kt)(o.p,{method:"returns",name:"AuthServiceUpdatePasswordResponse",mdxType:"ApiMethod"}),(0,s.kt)(a.I,{mdxType:"VersionType"},"blockjoy.v1.AuthServiceUpdatePasswordResponse"))}g.isMDXComponent=!0}}]);