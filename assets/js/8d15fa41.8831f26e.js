"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1287],{15680:(e,t,n)=>{n.d(t,{Z:()=>i});var s,o,r=n(67294);function a(){return a=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e},a.apply(this,arguments)}const i=e=>{let{title:t,titleId:n,...i}=e;return r.createElement("svg",a({width:12,height:12,viewBox:"0 0 12 12",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":n},i),t?r.createElement("title",{id:n},t):null,s||(s=r.createElement("path",{d:"M9 1a1 1 0 0 0-1-1H1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h3.5V4.5a1 1 0 0 1 1-1H9V1Z",fill:"#F8FAF6"})),o||(o=r.createElement("path",{d:"M11.5 5h-5a.5.5 0 0 0-.5.5v6a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 .5-.5v-6a.5.5 0 0 0-.5-.5Z",fill:"#F8FAF6"})))}},70630:(e,t,n)=>{n.d(t,{p:()=>r});var s=n(67294);const o="base_L3V1",r=e=>{let{method:t,name:n}=e;return s.createElement("h2",{className:o},t&&s.createElement("span",null,t)," ",n&&s.createElement("span",null,n))}},77583:(e,t,n)=>{n.d(t,{D:()=>b});var s=n(67294),o=n(87892);const r="wrapper_d4Gc",a="base_cZP3",i="heading_kxJX",l="select_XVTu",c="buttonWrapper_Ucky",p="button_Pj6S",m="copyButtonSuccess_ASuz",d="copyButtonText_cmI7",u="copyButtonSuccessIcon_tD3P";var h;function g(){return g=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e},g.apply(this,arguments)}const T=e=>{let{title:t,titleId:n,...o}=e;return s.createElement("svg",g({width:12,height:12,viewBox:"0 0 12 12",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":n},o),t?s.createElement("title",{id:n},t):null,h||(h=s.createElement("path",{d:"m3.275 4.461-1.788 1.54 1.788 1.538a.596.596 0 0 1 .21.407.619.619 0 0 1-.132.441.585.585 0 0 1-.396.214.563.563 0 0 1-.425-.14l-2.323-2A.598.598 0 0 1 0 6.001a.617.617 0 0 1 .209-.462l2.323-2a.568.568 0 0 1 .814.08.613.613 0 0 1-.071.842ZM11.79 5.54l-2.323-2a.575.575 0 0 0-.425-.14.567.567 0 0 0-.396.214.607.607 0 0 0-.132.44.615.615 0 0 0 .21.408l1.788 1.54-1.788 1.538a.596.596 0 0 0-.21.407.619.619 0 0 0 .132.441.585.585 0 0 0 .396.214.563.563 0 0 0 .425-.14l2.323-2a.6.6 0 0 0 .209-.46.617.617 0 0 0-.209-.462ZM7.747 1.036a.563.563 0 0 0-.627.159.604.604 0 0 0-.117.2l-3.097 8.8a.618.618 0 0 0 .02.459.588.588 0 0 0 .526.346c.119 0 .235-.038.333-.108a.598.598 0 0 0 .212-.287l3.097-8.8a.618.618 0 0 0-.153-.648.578.578 0 0 0-.194-.12Z",fill:"#F8FAF6"})))};var v=n(15680),y=n(69612);const b=e=>{let{codes:t,defaultLanguage:n="go"}=e;const[h,g]=(0,s.useState)(!1),[b,w]=(0,s.useState)(!0),[S,k]=(0,s.useState)(n),f=(0,s.useMemo)((()=>t?.find((e=>e.language===S))),[t,S]),x=(0,s.useMemo)((()=>t?.map((e=>{let{language:t}=e;return t}))),[t]),_=(0,s.useMemo)((()=>f?.codeShorten&&b?f?.codeShorten:f?.code),[f,b]);return s.createElement("div",{className:r},s.createElement("div",{className:i},s.createElement("select",{className:l,onChange:e=>{var t;(t=e.currentTarget.value,["typescript","javascript","python","go","rust"].includes(t))&&k(e.currentTarget.value)}},x.map((e=>s.createElement("option",{value:e,key:e},e)))),s.createElement("div",{className:c},f?.codeShorten&&s.createElement("button",{className:p,onClick:()=>w(!b)},s.createElement("span",null,b?"Show Full Code":"Show Less Code"),s.createElement(T,null)),s.createElement("button",{onClick:()=>{navigator.clipboard.writeText(_).then((()=>{g(!0),setTimeout((()=>{g(!1)}),1e3)})).catch()},className:h?m:p},s.createElement(y.Z,{className:u}),s.createElement("span",{className:d},s.createElement("span",null,"Copy"),s.createElement(v.Z,null))))),f?s.createElement("div",{className:a},s.createElement(o.dn,{text:_,language:f.language,theme:o.cL,codeBlock:!0})):null)}},27988:(e,t,n)=>{n.d(t,{i:()=>o});var s=n(67294);const o=e=>{let{children:t}=e;return s.createElement("table",null,t)}},21455:(e,t,n)=>{n.d(t,{R:()=>o});var s=n(67294);const o=e=>{let{children:t}=e;return s.createElement("tbody",null,t)}},51885:(e,t,n)=>{n.d(t,{s:()=>p});var s,o=n(67294);function r(){return r=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e},r.apply(this,arguments)}const a=e=>{let{title:t,titleId:n,...a}=e;return o.createElement("svg",r({width:12,height:12,viewBox:"0 0 12 12",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":n},a),t?o.createElement("title",{id:n},t):null,s||(s=o.createElement("path",{d:"m9.72 5.28-5-5a1 1 0 0 0-1.415 1.415l4.293 4.293-4.293 4.293a1 1 0 1 0 1.414 1.414l5-5a1 1 0 0 0 0-1.414Z",fill:"#5F615D"})))},i="cell_xH13",l="cell--active_xKr9",c="cellClickable_VRgO",p=e=>{let{items:t,children:n,rowCounter:s=0}=e;const[r,p]=(0,o.useState)(!1),m=e=>n&&0===e,d=e=>0===e&&n?{paddingLeft:12+20*s+"px"}:0===e?{paddingLeft:36+20*s+"px"}:void 0;return o.createElement(o.Fragment,null,o.createElement("tr",null,t?.map(((e,t)=>o.createElement("td",{className:m(t)?c:void 0,onClick:m(t)?()=>p(!r):void 0,style:d(t),key:t},m(t)?o.createElement("span",{className:r?l:i},o.createElement(a,null),e):e)))),o.createElement(o.Fragment,null,r&&n))}},97022:(e,t,n)=>{n.d(t,{s:()=>o});var s=n(67294);const o=e=>{let{items:t}=e;return s.createElement("thead",null,s.createElement("tr",null,t.map(((e,t)=>s.createElement("th",{key:t},e)))))}},54968:(e,t,n)=>{n.d(t,{s:()=>i});var s=n(67294);const o="info_eCVA",r="warning_Cn6H",a="base_cmOb",i=e=>{let{text:t,info:n,warning:i,infoInFront:l,warningInFront:c}=e;return s.createElement("div",{className:a},c&&s.createElement("span",{className:r},c),l&&s.createElement("span",{className:o},l),s.createElement("span",null,t),i&&s.createElement("span",{className:r},i),n&&s.createElement("span",{className:o},n)," ")}},36348:(e,t,n)=>{n.d(t,{I:()=>r});var s=n(67294);const o="base_PRYo",r=e=>{let{children:t}=e;return s.createElement("p",{className:o},s.createElement("span",null,t))}},61510:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>y,contentTitle:()=>T,default:()=>k,frontMatter:()=>g,metadata:()=>v,toc:()=>b});var s=n(87462),o=n(67294),r=n(3905),a=n(36348),i=n(70630),l=n(77583);const c=[{code:'package main\n\nimport (\n   "context"\n   "crypto/tls"\n   "crypto/x509"\n   "fmt"\n   v1 "github.com/blockjoy/api/sdk/go/blockjoy/v1" \n   "google.golang.org/grpc"\n   "google.golang.org/grpc/credentials"\n   "log"\n   "time"\n)\n\nconst (\n   hostServiceAddress = "unknown-grpc:443" \n)\n\nfunc main() {\n   ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)\n   defer cancel()\n\n   // Set up a connection to the server.\n   hostServiceConn, err := grpc.DialContext(ctx, hostServiceAddress, getSecureOptions()...) \n   if err != nil {                                                                          \n      log.Fatalf("did not connect: %v", err) \n   } \n   defer hostServiceConn.Close() \n   hostService := v1.NewHostServiceClient(hostServiceConn) \n   r1, _ := hostService.List(ctx, &v1.HostServiceListRequest{})\n   fmt.Println(r1)\n}\n\nfunc getSecureOptions() []grpc.DialOption {\n   systemRoots, err := x509.SystemCertPool()\n   if err != nil {\n      log.Fatal(err)\n   }\n   cred := credentials.NewTLS(&tls.Config{\n      RootCAs: systemRoots,\n   })\n   return []grpc.DialOption{grpc.WithTransportCredentials(cred), grpc.WithBlock()}\n}\n',codeShorten:"resp, _ := hostService.List(ctx, &v1.HostServiceListRequest{})\nfmt.Println(resp)",language:"go"},{code:'import React, { useEffect, useState } from \'react\'\nimport { grpc } from "@improbable-eng/grpc-web"\nimport { HostServiceClient } from "api/sdk/ts/blockjoy/v1/host_pb_service"\nimport { HostServiceListRequest, HostServiceListResponse } from "api/sdk/ts/blockjoy/v1/host_pb"\n\nvar hostService0 = new HostServiceClient(\'https://unknown-grpc-web\')\nfunction App(){\n    const [response, setResponse] = useState<string>("")\n    useEffect(() => { \n        const hostservicelistrequest = new HostServiceListRequest()\n        \n        hostService0.list(hostservicelistrequest, getMetadata(), (err, value:HostServiceListResponse|null) => {\n            setResponse(JSON.stringify(err ? err : value))\n        })\n    }, [])\n    return <>\n        <ol>\n        {response}\n        </ol>\n    </>\n}\nconst getMetadata = () => {\n    const meta = new grpc.Metadata()\n    return meta\n}\nexport default App;',codeShorten:'const hostservicelistrequest = new HostServiceListRequest();\n\nservice.list(hostservicelistrequest, (err, value:HostServiceListResponse|null) => {\n    const resp = JSON.stringify(err ? err : value);\n    console.log("received ", resp);\n})',language:"typescript"},{code:'import React, { useEffect, useState } from \'react\'\nimport { grpc } from "@improbable-eng/grpc-web"\nimport { HostServiceClient } from "api/sdk/ts/blockjoy/v1/host_pb_service"\nimport { HostServiceListRequest, HostServiceListResponse } from "api/sdk/ts/blockjoy/v1/host_pb"\n\nvar hostService0 = new HostServiceClient(\'https://unknown-grpc-web\')\nfunction App(){\n    const [response, setResponse] = useState("")\n    useEffect(() => { \n        const hostservicelistrequest = new HostServiceListRequest()\n        \n        hostService0.list(hostservicelistrequest, getMetadata(), (err, value) => {\n            setResponse(JSON.stringify(err ? err : value))\n        })\n    }, [])\n    return <>\n        <ol>\n        {response}\n        </ol>\n    </>\n}\nconst getMetadata = () => {\n    const meta = new grpc.Metadata()\n    return meta\n}\nexport default App;',codeShorten:'const hostservicelistrequest = new HostServiceListRequest();\n\nservice.list(hostservicelistrequest, (err, value) => {\n    const resp = JSON.stringify(err ? err : value);\n    console.log("received ", resp);\n})',language:"javascript"},{code:'extern crate api;\nuse tonic::transport::Channel;\n\nuse api::blockjoy::v1::host_service_client::HostServiceClient;\nuse api::blockjoy::v1::HostServiceListRequest;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n  let channel = Channel::from_static("unknown-grpc")\n    .connect()\n    .await?;\n  let mut client = HostServiceClient::new(channel); \n\n  let request = tonic::Request::new(\n    HostServiceListRequest{\n      org_id: None\n    });\n// sending request and waiting for response\n  let response = client.list(request).await?.into_inner();\n  println!("RESPONSE={:?}", response);\n  Ok(())\n}',language:"rust"}];var p=n(54968),m=n(27988),d=n(97022),u=n(21455),h=n(51885);const g={sidebar_position:5},T="List",v={unversionedId:"host-service/list",id:"host-service/list",title:"List",description:"blockjoy.v1.HostServiceListRequest",source:"@site/docs/host-service/list.mdx",sourceDirName:"host-service",slug:"/host-service/list",permalink:"/docs/host-service/list",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/host-service/list.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"apiSidebar",previous:{title:"Get",permalink:"/docs/host-service/get"},next:{title:"Provision",permalink:"/docs/host-service/provision"}},y={},b=[],w={toc:b},S="wrapper";function k(e){let{components:t,...n}=e;return(0,r.kt)(S,(0,s.Z)({},w,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"list"},"List"),(0,r.kt)(i.p,{method:"rpc",name:"List",mdxType:"ApiMethod"}),(0,r.kt)(i.p,{method:"requests",name:"HostServiceListRequest",mdxType:"ApiMethod"}),(0,r.kt)(a.I,{mdxType:"VersionType"},"blockjoy.v1.HostServiceListRequest"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Field"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"org_id"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)(l.D,{codes:c,mdxType:"CustomCodeBlock"}),(0,r.kt)(i.p,{method:"returns",name:"HostServiceListResponse",mdxType:"ApiMethod"}),(0,r.kt)(a.I,{mdxType:"VersionType"},"blockjoy.v1.HostServiceListResponse"),(0,r.kt)(m.i,{mdxType:"Table"},(0,r.kt)(d.s,{items:["Field","Type","Description"],mdxType:"TableHead"}),(0,r.kt)(u.R,{mdxType:"TableBody"},(0,r.kt)(h.s,{items:["hosts",(0,r.kt)(p.s,{text:"Host",info:"repeated",mdxType:"TableCellWithOption"}),"A Host is a physical (bare metal) server that is provisioned to run Nodes. [Example]{ \u201cid\u201d: \u201cc67f154e-3288-40d7-9622-e41094d83ffa\u201d, \u201cname\u201d: \u201cfair-robin-blue\u201d, \u201cversion\u201d: \u201c1.0\u201d, \u201ccpu_count\u201d: 64, \u201cmem_size_bytes\u201d: 64000000000, \u201cdisk_size_bytes\u201d: 4000000000000, \u201cos\u201d: \u201cLinux\u201d \u201cos_version\u201d: \u201c3.6.9\u201d, \u201cip\u201d: \u201c192.168.2.133\u201d, \u201cstatus\u201d: 1, \u201ccreated_at\u201d: \u201c2023-06-06T12:41:57.317Z\u201d, \u201cip_range_from\u201d: \u201c192.168.1.2\u201d, \u201cip_range_to\u201d: \u201c192.168.1.99\u201d, \u201cip_gateway\u201d: \u201c192.168.1.1\u201d, \u201corg_id\u201d: \u201cf24b61a5-f80b-4e69-b4c8-028c66323153\u201d }"],mdxType:"TableBodyRow"},(0,r.kt)(h.s,{items:[(0,r.kt)(p.s,{text:"cpu_count",warning:"optional",mdxType:"TableCellWithOption"}),"unsigned int (64 bit)","The number of logical cores the machine has."],rowCounter:1,mdxType:"TableBodyRow"}),(0,r.kt)(h.s,{items:["created_at","Timestamp","The moment this host was created. Corresponds to the moment that the host_provision was"],rowCounter:1,mdxType:"TableBodyRow"},(0,r.kt)(h.s,{items:["nanos","int (32 bit)",""],rowCounter:2,mdxType:"TableBodyRow"}),(0,r.kt)(h.s,{items:["seconds","int (64 bit)",""],rowCounter:2,mdxType:"TableBodyRow"})),(0,r.kt)(h.s,{items:[(0,r.kt)(p.s,{text:"disk_size_bytes",warning:"optional",mdxType:"TableCellWithOption"}),"unsigned int (64 bit)","The size of the physical disks the machine has."],rowCounter:1,mdxType:"TableBodyRow"}),(0,r.kt)(h.s,{items:["id","string","This is the id of the host."],rowCounter:1,mdxType:"TableBodyRow"}),(0,r.kt)(h.s,{items:["ip","string","The ip address on which the machine is reachable."],rowCounter:1,mdxType:"TableBodyRow"}),(0,r.kt)(h.s,{items:[(0,r.kt)(p.s,{text:"ip_gateway",warning:"optional",mdxType:"TableCellWithOption"}),"string","The ip gateway of this host."],rowCounter:1,mdxType:"TableBodyRow"}),(0,r.kt)(h.s,{items:[(0,r.kt)(p.s,{text:"ip_range_from",warning:"optional",mdxType:"TableCellWithOption"}),"string","The lowest ip address that this host may assign to a node."],rowCounter:1,mdxType:"TableBodyRow"}),(0,r.kt)(h.s,{items:[(0,r.kt)(p.s,{text:"ip_range_to",warning:"optional",mdxType:"TableCellWithOption"}),"string","The highest ip address that this host may assign to a node."],rowCounter:1,mdxType:"TableBodyRow"}),(0,r.kt)(h.s,{items:[(0,r.kt)(p.s,{text:"mem_size_bytes",warning:"optional",mdxType:"TableCellWithOption"}),"unsigned int (64 bit)","The amount of physical memory the machine has."],rowCounter:1,mdxType:"TableBodyRow"}),(0,r.kt)(h.s,{items:["name","string","This is the randomly generated name of the host."],rowCounter:1,mdxType:"TableBodyRow"}),(0,r.kt)(h.s,{items:[(0,r.kt)(p.s,{text:"org_id",warning:"optional",mdxType:"TableCellWithOption"}),"string","The organization that this host belongs to."],rowCounter:1,mdxType:"TableBodyRow"}),(0,r.kt)(h.s,{items:["os","string","The operating system running on the machine, i.e. \u201cBSD\u201d or \u201cLinux\u201d."],rowCounter:1,mdxType:"TableBodyRow"}),(0,r.kt)(h.s,{items:["os_version","string","The version of said operating system running on the host."],rowCounter:1,mdxType:"TableBodyRow"}),(0,r.kt)(h.s,{items:["status","HostStatus",(0,r.kt)(o.Fragment,null,(0,r.kt)("p",null,(0,r.kt)("strong",null,"Field:")," Current status of the machine, or UNSPECIFIED."),(0,r.kt)("p",null,(0,r.kt)("strong",null,"HostStatus:")," Possible states the container is described with")),""],rowCounter:1,mdxType:"TableBodyRow"},(0,r.kt)(h.s,{items:["HOST_STATUS_UNSPECIFIED","= 0",""],rowCounter:2,mdxType:"TableBodyRow"}),(0,r.kt)(h.s,{items:["HOST_STATUS_CREATING","= 1",""],rowCounter:2,mdxType:"TableBodyRow"}),(0,r.kt)(h.s,{items:["HOST_STATUS_RUNNING","= 2",""],rowCounter:2,mdxType:"TableBodyRow"}),(0,r.kt)(h.s,{items:["HOST_STATUS_STARTING","= 3",""],rowCounter:2,mdxType:"TableBodyRow"}),(0,r.kt)(h.s,{items:["HOST_STATUS_STOPPING","= 4",""],rowCounter:2,mdxType:"TableBodyRow"}),(0,r.kt)(h.s,{items:["HOST_STATUS_STOPPED","= 5",""],rowCounter:2,mdxType:"TableBodyRow"}),(0,r.kt)(h.s,{items:["HOST_STATUS_UPGRADING","= 6",""],rowCounter:2,mdxType:"TableBodyRow"}),(0,r.kt)(h.s,{items:["HOST_STATUS_UPGRADED","= 7",""],rowCounter:2,mdxType:"TableBodyRow"}),(0,r.kt)(h.s,{items:["HOST_STATUS_DELETING","= 8",""],rowCounter:2,mdxType:"TableBodyRow"}),(0,r.kt)(h.s,{items:["HOST_STATUS_DELETED","= 9",""],rowCounter:2,mdxType:"TableBodyRow"}),(0,r.kt)(h.s,{items:["HOST_STATUS_INSTALLING","= 10",""],rowCounter:2,mdxType:"TableBodyRow"}),(0,r.kt)(h.s,{items:["HOST_STATUS_SNAPSHOTTING","= 11",""],rowCounter:2,mdxType:"TableBodyRow"})),(0,r.kt)(h.s,{items:["version","string","The version of the blockjoy control software running on the host."],rowCounter:1,mdxType:"TableBodyRow"})))))}k.isMDXComponent=!0}}]);