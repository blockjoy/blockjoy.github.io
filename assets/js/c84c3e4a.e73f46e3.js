"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3709],{15680:(e,t,r)=>{r.d(t,{Z:()=>o});var n,s,c=r(67294);function i(){return i=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},i.apply(this,arguments)}const o=e=>{let{title:t,titleId:r,...o}=e;return c.createElement("svg",i({width:12,height:12,viewBox:"0 0 12 12",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":r},o),t?c.createElement("title",{id:r},t):null,n||(n=c.createElement("path",{d:"M9 1a1 1 0 0 0-1-1H1a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h3.5V4.5a1 1 0 0 1 1-1H9V1Z",fill:"#F8FAF6"})),s||(s=c.createElement("path",{d:"M11.5 5h-5a.5.5 0 0 0-.5.5v6a.5.5 0 0 0 .5.5h5a.5.5 0 0 0 .5-.5v-6a.5.5 0 0 0-.5-.5Z",fill:"#F8FAF6"})))}},31531:(e,t,r)=>{r.d(t,{p:()=>c});var n=r(67294);const s="base_L3V1",c=e=>{let{method:t,name:r}=e;return n.createElement("h2",{className:s},t&&n.createElement("span",null,t)," ",r&&n.createElement("span",null,r))}},98238:(e,t,r)=>{r.d(t,{D:()=>h});var n=r(67294),s=r(87892);const c="wrapper_d4Gc",i="base_cZP3",o="heading_kxJX",a="select_XVTu",l="buttonWrapper_Ucky",v="button_Pj6S",p="copyButtonSuccess_ASuz",d="copyButtonText_cmI7",u="copyButtonSuccessIcon_tD3P";var m;function g(){return g=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},g.apply(this,arguments)}const y=e=>{let{title:t,titleId:r,...s}=e;return n.createElement("svg",g({width:12,height:12,viewBox:"0 0 12 12",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":r},s),t?n.createElement("title",{id:r},t):null,m||(m=n.createElement("path",{d:"m3.275 4.461-1.788 1.54 1.788 1.538a.596.596 0 0 1 .21.407.619.619 0 0 1-.132.441.585.585 0 0 1-.396.214.563.563 0 0 1-.425-.14l-2.323-2A.598.598 0 0 1 0 6.001a.617.617 0 0 1 .209-.462l2.323-2a.568.568 0 0 1 .814.08.613.613 0 0 1-.071.842ZM11.79 5.54l-2.323-2a.575.575 0 0 0-.425-.14.567.567 0 0 0-.396.214.607.607 0 0 0-.132.44.615.615 0 0 0 .21.408l1.788 1.54-1.788 1.538a.596.596 0 0 0-.21.407.619.619 0 0 0 .132.441.585.585 0 0 0 .396.214.563.563 0 0 0 .425-.14l2.323-2a.6.6 0 0 0 .209-.46.617.617 0 0 0-.209-.462ZM7.747 1.036a.563.563 0 0 0-.627.159.604.604 0 0 0-.117.2l-3.097 8.8a.618.618 0 0 0 .02.459.588.588 0 0 0 .526.346c.119 0 .235-.038.333-.108a.598.598 0 0 0 .212-.287l3.097-8.8a.618.618 0 0 0-.153-.648.578.578 0 0 0-.194-.12Z",fill:"#F8FAF6"})))};var S=r(15680),k=r(69612);const h=e=>{let{codes:t,defaultLanguage:r="go"}=e;const[m,g]=(0,n.useState)(!1),[h,f]=(0,n.useState)(!0),[b,w]=(0,n.useState)(r),N=(0,n.useMemo)((()=>t?.find((e=>e.language===b))),[t,b]),D=(0,n.useMemo)((()=>t?.map((e=>{let{language:t}=e;return t}))),[t]),E=(0,n.useMemo)((()=>N?.codeShorten&&h?N?.codeShorten:N?.code),[N,h]);return n.createElement("div",{className:c},n.createElement("div",{className:o},n.createElement("select",{className:a,onChange:e=>{var t;(t=e.currentTarget.value,["typescript","javascript","python","go","rust"].includes(t))&&w(e.currentTarget.value)}},D.map((e=>n.createElement("option",{value:e,key:e},e)))),n.createElement("div",{className:l},N?.codeShorten&&n.createElement("button",{className:v,onClick:()=>f(!h)},n.createElement("span",null,h?"Show Full Code":"Show Less Code"),n.createElement(y,null)),n.createElement("button",{onClick:()=>{navigator.clipboard.writeText(E).then((()=>{g(!0),setTimeout((()=>{g(!1)}),1e3)})).catch()},className:m?p:v},n.createElement(k.Z,{className:u}),n.createElement("span",{className:d},n.createElement("span",null,"Copy"),n.createElement(S.Z,null))))),N?n.createElement("div",{className:i},n.createElement(s.dn,{text:E,language:N.language,theme:s.cL,codeBlock:!0})):null)}},34695:(e,t,r)=>{r.d(t,{I:()=>c});var n=r(67294);const s="base_PRYo",c=e=>{let{children:t}=e;return n.createElement("p",{className:s},n.createElement("span",null,t))}},31445:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>v,default:()=>y,frontMatter:()=>l,metadata:()=>p,toc:()=>u});var n=r(87462),s=(r(67294),r(3905)),c=r(34695),i=r(31531),o=r(98238);const a=[{code:'package main\n\nimport (\n   "context"\n   "crypto/tls"\n   "crypto/x509"\n   "fmt"\n   v1 "github.com/blockjoy/api/sdk/go/blockjoy/v1" \n   "google.golang.org/grpc"\n   "google.golang.org/grpc/credentials"\n   "log"\n   "time"\n)\n\nconst (\n   discoveryServiceAddress = "unknown-grpc:443" \n)\n\nfunc main() {\n   ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)\n   defer cancel()\n\n   // Set up a connection to the server.\n   discoveryServiceConn, err := grpc.DialContext(ctx, discoveryServiceAddress, getSecureOptions()...) \n   if err != nil {                                                                                    \n      log.Fatalf("did not connect: %v", err) \n   } \n   defer discoveryServiceConn.Close() \n   discoveryService := v1.NewDiscoveryServiceClient(discoveryServiceConn) \n   r1, _ := discoveryService.Services(ctx, &v1.DiscoveryServiceServicesRequest{})\n   fmt.Println(r1)\n}\n\nfunc getSecureOptions() []grpc.DialOption {\n   systemRoots, err := x509.SystemCertPool()\n   if err != nil {\n      log.Fatal(err)\n   }\n   cred := credentials.NewTLS(&tls.Config{\n      RootCAs: systemRoots,\n   })\n   return []grpc.DialOption{grpc.WithTransportCredentials(cred), grpc.WithBlock()}\n}\n',codeShorten:"resp, _ := discoveryService.Services(ctx, &v1.DiscoveryServiceServicesRequest{})\nfmt.Println(resp)",language:"go"},{code:'import React, { useEffect, useState } from \'react\'\nimport { grpc } from "@improbable-eng/grpc-web"\nimport { DiscoveryServiceServicesRequest, DiscoveryServiceServicesResponse } from "api/sdk/ts/blockjoy/v1/discovery_pb"\nimport { DiscoveryServiceClient } from "api/sdk/ts/blockjoy/v1/discovery_pb_service"\n\nvar discoveryService0 = new DiscoveryServiceClient(\'https://unknown-grpc-web\')\nfunction App(){\n    const [response, setResponse] = useState<string>("")\n    useEffect(() => { \n        const discoveryserviceservicesrequest = new DiscoveryServiceServicesRequest()\n        \n        discoveryService0.services(discoveryserviceservicesrequest, getMetadata(), (err, value:DiscoveryServiceServicesResponse|null) => {\n            setResponse(JSON.stringify(err ? err : value))\n        })\n    }, [])\n    return <>\n        <ol>\n        {response}\n        </ol>\n    </>\n}\nconst getMetadata = () => {\n    const meta = new grpc.Metadata()\n    return meta\n}\nexport default App;',codeShorten:'const discoveryserviceservicesrequest = new DiscoveryServiceServicesRequest();\n\nservice.services(discoveryserviceservicesrequest, (err, value:DiscoveryServiceServicesResponse|null) => {\n    const resp = JSON.stringify(err ? err : value);\n    console.log("received ", resp);\n})',language:"typescript"},{code:'import React, { useEffect, useState } from \'react\'\nimport { grpc } from "@improbable-eng/grpc-web"\nimport { DiscoveryServiceClient } from "api/sdk/ts/blockjoy/v1/discovery_pb_service"\nimport { DiscoveryServiceServicesRequest, DiscoveryServiceServicesResponse } from "api/sdk/ts/blockjoy/v1/discovery_pb"\n\nvar discoveryService0 = new DiscoveryServiceClient(\'https://unknown-grpc-web\')\nfunction App(){\n    const [response, setResponse] = useState("")\n    useEffect(() => { \n        const discoveryserviceservicesrequest = new DiscoveryServiceServicesRequest()\n        \n        discoveryService0.services(discoveryserviceservicesrequest, getMetadata(), (err, value) => {\n            setResponse(JSON.stringify(err ? err : value))\n        })\n    }, [])\n    return <>\n        <ol>\n        {response}\n        </ol>\n    </>\n}\nconst getMetadata = () => {\n    const meta = new grpc.Metadata()\n    return meta\n}\nexport default App;',codeShorten:'const discoveryserviceservicesrequest = new DiscoveryServiceServicesRequest();\n\nservice.services(discoveryserviceservicesrequest, (err, value) => {\n    const resp = JSON.stringify(err ? err : value);\n    console.log("received ", resp);\n})',language:"javascript"},{code:'extern crate api;\nuse tonic::transport::Channel;\n\nuse api::blockjoy::v1::discovery_service_client::DiscoveryServiceClient;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n  let channel = Channel::from_static("unknown-grpc")\n    .connect()\n    .await?;\n  let mut client = DiscoveryServiceClient::new(channel); \n\n  let request = tonic::Request::new(\n    ());\n// sending request and waiting for response\n  let response = client.services(request).await?.into_inner();\n  println!("RESPONSE={:?}", response);\n  Ok(())\n}',language:"rust"}],l={sidebar_position:2},v="Services",p={unversionedId:"discovery-service/services",id:"discovery-service/services",title:"Services",description:"Return relevant service URLs",source:"@site/docs/discovery-service/services.mdx",sourceDirName:"discovery-service",slug:"/discovery-service/services",permalink:"/docs/discovery-service/services",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/discovery-service/services.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"apiSidebar",previous:{title:"Discovery Service",permalink:"/docs/discovery-service/"},next:{title:"Host Provision Service",permalink:"/docs/host-provision-service/"}},d={},u=[],m={toc:u},g="wrapper";function y(e){let{components:t,...r}=e;return(0,s.kt)(g,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"services"},"Services"),(0,s.kt)(i.p,{method:"rpc",name:"Services",mdxType:"ApiMethod"}),(0,s.kt)("p",null,"Return relevant service URLs"),(0,s.kt)(i.p,{method:"requests",name:"DiscoveryServiceServicesRequest",mdxType:"ApiMethod"}),(0,s.kt)(c.I,{mdxType:"VersionType"},"blockjoy.v1.DiscoveryServiceServicesRequest"),(0,s.kt)(o.D,{codes:a,mdxType:"CustomCodeBlock"}),(0,s.kt)(i.p,{method:"returns",name:"DiscoveryServiceServicesResponse",mdxType:"ApiMethod"}),(0,s.kt)(c.I,{mdxType:"VersionType"},"blockjoy.v1.DiscoveryServiceServicesResponse"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:null},"Field"),(0,s.kt)("th",{parentName:"tr",align:null},"Type"),(0,s.kt)("th",{parentName:"tr",align:null},"Description"))),(0,s.kt)("tbody",{parentName:"table"},(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"key_service_url"),(0,s.kt)("td",{parentName:"tr",align:null},"string"),(0,s.kt)("td",{parentName:"tr",align:null})),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"notification_url"),(0,s.kt)("td",{parentName:"tr",align:null},"string"),(0,s.kt)("td",{parentName:"tr",align:null})),(0,s.kt)("tr",{parentName:"tbody"},(0,s.kt)("td",{parentName:"tr",align:null},"registry_url"),(0,s.kt)("td",{parentName:"tr",align:null},"string"),(0,s.kt)("td",{parentName:"tr",align:null})))))}y.isMDXComponent=!0}}]);